// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// The `model User` defines the structure and properties of the `User` entity in the database.
model User {
  id            String          @id @unique @default(uuid())
  email         String          @unique
  name          String?
  picture       String?
  credential    String?
  password      String?
  role          String?         @default("USER")
  checkins      Checkin[]
  inboxes       Inbox[]
  kontak        String?
  nip           String?
  isOtorisasi   Boolean?        @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Collaborator  Collaborator[]
  Equipment     Equipment[]
  EquipmentItem EquipmentItem[]
}

model Checkin {
  id             String             @id @unique @default(uuid())
  userId         String
  user           User?              @relation(fields: [userId], references: [id])
  latitude       Float?
  longitude      Float?
  address        String?
  picture        String?
  picture_keluar String?
  otorisasi      Boolean?           @default(false)
  status         Boolean?
  catatans       catatanAktifitas[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  InboxAdmin     InboxAdmin[]
  Collaborator   Collaborator[]
  Equipment      Equipment[]
  EquipmentItem  EquipmentItem[]
}

model Collaborator {
  id        String    @id @unique @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  checkinId String?
  checkin   Checkin?  @relation(fields: [checkinId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rekanans  Rekanan[]
}

model Equipment {
  id            String          @id @unique @default(uuid())
  userId        String?
  user          User?           @relation(fields: [userId], references: [id])
  checkinId     String?
  checkin       Checkin?        @relation(fields: [checkinId], references: [id])
  nama          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  EquipmentItem EquipmentItem[]
}

model EquipmentItem {
  id          String     @id @unique @default(uuid())
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  checkinId   String?
  checkin     Checkin?   @relation(fields: [checkinId], references: [id])
  equipmentId String?
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  nama        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Rekanan {
  id             String        @id @unique @default(uuid())
  collaboratorId String?
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  deskripsi      String?
  nama_rekan     String
  nomor_rekan    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model catatanAktifitas {
  id            String   @id @unique @default(uuid())
  checkinId     String?
  checkin       Checkin? @relation(fields: [checkinId], references: [id])
  deskripsi     String?
  nama_pelapor  String
  nomor_pelapor String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Inbox {
  id        String   @id @unique @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  title     String?
  message   String?
  flag      Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InboxAdmin {
  id          String   @id @unique @default(uuid())
  checkInId   String?
  inboxUserId String?
  checkIn     Checkin? @relation(fields: [checkInId], references: [id])
  title       String?
  message     String?
  isReaded    Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
